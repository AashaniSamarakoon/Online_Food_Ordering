package com.example.restaurantservice.service;

import com.example.restaurantservice.client.PaymentServiceClient;
import com.example.restaurantservice.dto.TransactionResponse;
import com.example.restaurantservice.model.Transaction;
import com.example.restaurantservice.repository.TransactionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class TransactionService {

    private final PaymentServiceClient paymentServiceClient;
    private final TransactionRepository transactionRepository;

    /**
     * Fetch transactions from payment service and save them to local database
     */
    @Transactional
    public List<Transaction> syncTransactionsForRestaurant(Long restaurantId) {
        try {
            log.info("Fetching transactions for restaurant ID: {}", restaurantId);
            List<TransactionResponse> transactionResponses = paymentServiceClient.getTransactionsByRestaurantId(restaurantId);
            log.info("Received {} transactions from payment service", transactionResponses.size());

            List<Transaction> savedTransactions = new ArrayList<>();

            for (TransactionResponse response : transactionResponses) {
                try {
                    // Skip if we already have this transaction
                    if (transactionRepository.existsByPaymentServiceTransactionId(response.getId())) {
                        log.debug("Transaction with payment service ID {} already exists, skipping", response.getId());
                        continue;
                    }

                    // Convert to entity and save
                    Transaction transaction = convertToEntity(response);
                    Transaction savedTransaction = transactionRepository.save(transaction);
                    savedTransactions.add(savedTransaction);

                    log.debug("Saved transaction with ID: {}", savedTransaction.getId());
                } catch (DataIntegrityViolationException e) {
                    // This can happen if two concurrent processes try to save the same transaction
                    log.warn("Could not save transaction with payment service ID {}: {}",
                            response.getId(), e.getMessage());
                } catch (Exception e) {
                    log.error("Error saving transaction with payment service ID {}: {}",
                            response.getId(), e.getMessage());
                }
            }

            log.info("Successfully saved {} new transactions", savedTransactions.size());
            return savedTransactions;
        } catch (Exception e) {
            log.error("Error syncing transactions for restaurant ID {}: {} - {}",
                    restaurantId, e.getClass().getName(), e.getMessage());
            throw new RuntimeException("Failed to sync transactions: " + e.getMessage(), e);
        }
    }

    /**
     * Get transactions from local database
     */
    public List<Transaction> getTransactionsForRestaurant(Long restaurantId) {
        return transactionRepository.findByRestaurantId(restaurantId);
    }

    /**
     * Convert DTO from payment service to local entity
     */
    private Transaction convertToEntity(TransactionResponse response) {
        if (response == null) {
            throw new IllegalArgumentException("Response cannot be null");
        }

        if (response.getId() == null) {
            throw new IllegalArgumentException("Payment service transaction ID cannot be null");
        }

        Transaction transaction = new Transaction();
        // Don't set the ID as it should be auto-generated by the database
        transaction.setRestaurantId(response.getRestaurantId());
        transaction.setDate(response.getDate() != null ? response.getDate() : java.time.LocalDate.now());
        transaction.setDescription(response.getDescription());
        transaction.setBankName(response.getBankName());
        transaction.setAmount(response.getAmount());
        transaction.setPaymentServiceTransactionId(response.getId());

        return transaction;
    }
}