# Server
server.port=8081
spring.application.name=restaurant-service

file.upload-dir=uploads/


restaurant-auth.url=http://localhost:8082

# Database
#?currentSchema=public
spring.datasource.url=jdbc:postgresql://localhost:5432/restaurant_service_db
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection pool settings
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=10000

# JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Debug logging
logging.level.org.springframework.jdbc=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.com.zaxxer.hikari=TRACE
logging.level.org.postgresql=TRACE
# OAuth2 Resource Server Configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8082/auth/realms/food-ordering
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8082/auth/realms/food-ordering/protocol/openid-connect/certs


spring.cache.type=redis
spring.cache.redis.time-to-live=600000