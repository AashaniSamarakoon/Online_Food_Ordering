# Server
server.port=8081
spring.application.name=restaurant-service

# Database
spring.datasource.url=jdbc:postgresql://ep-long-brook-a4bpeyso-pooler.us-east-1.aws.neon.tech/restaurant_service?sslmode=require
spring.datasource.username=neondb_owner
spring.datasource.password=npg_DfrEgzM9vc1o
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# OAuth2 Resource Server Configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8082/auth/realms/food-ordering
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8082/auth/realms/food-ordering/protocol/openid-connect/certs


spring.cache.type=redis
spring.cache.redis.time-to-live=600000